


gen_code() frame=20
ASM: 	.text
ASM: 	.global	_main
ASM: _main:

=================================================================== NEW INST allocreg (65)
ASM: ; ALLOCREG - gpr8

=================================================================== NEW INST allocreg (65)
ASM: ; ALLOCREG - gpr7

=================================================================== NEW INST allocreg (65)
ASM: ; ALLOCREG - gpr6

=================================================================== NEW INST move (2)
	DUMP code = move
	DUMP z < REG:gpr7 VAR STORAGE:AUTO:0(sp) > 'myShort' 
	DUMP q1 < KONST:-16721 >
	DUMP q2 < FLAG:0  >
PRIC2...
	move short #S-16721->gpr7(myShort) size=2
-----
ASM: ; ASSIGN type:s srcreg:noreg destreg:gpr7
;JL - load_reg gpr7 with value of type s
ASM: ; load_reg targ reg size:4    src data size:2
ASM: 	[:gpr7+0] = $af	
ASM: 	[:gpr7+1] = $be	
ASM: 	[:gpr7+2] = $ff ; padding
ASM: 	[:gpr7+3] = $ff ; padding
ASM: ; save_result stored in gpr7
ASM: ; save_result ISREG
ASM: ; save_result : targ ISREG gpr7 and srcReg is same as targReg so nothing to do

=================================================================== NEW INST move (2)
	DUMP code = move
	DUMP z < REG:gpr6 VAR STORAGE:AUTO:4(sp) > 'myLong' 
	DUMP q1 < KONST:65278 >
	DUMP q2 < FLAG:0  >
PRIC2...
	move long #L65278->gpr6(myLong) size=4
-----
ASM: ; ASSIGN type:l srcreg:noreg destreg:gpr6
;JL - load_reg gpr6 with value of type l
ASM: ; load_reg targ reg size:4    src data size:4
ASM: 	[:gpr6+0] = $fe	
ASM: 	[:gpr6+1] = $fe	
ASM: 	[:gpr6+2] = $00	
ASM: 	[:gpr6+3] = $00	
ASM: ; save_result stored in gpr6
ASM: ; save_result ISREG
ASM: ; save_result : targ ISREG gpr6 and srcReg is same as targReg so nothing to do

=================================================================== NEW INST move (2)
	DUMP code = move
	DUMP z < VAR STORAGE:AUTO:8(sp) > 'myStruct' 
	DUMP q1 < KONST:170 >
	DUMP q2 < FLAG:0  >
PRIC2...
	move long #L170->M0+8(FP)(myStruct) size=4
-----
ASM: ; ASSIGN type:l srcreg:noreg destreg:noreg
;JL - load_reg gtmp1 with value of type l
ASM: ; load_reg targ reg size:4    src data size:4
ASM: 	[:gtmp1+0] = $aa	
ASM: 	[:gtmp1+1] = $00	
ASM: 	[:gtmp1+2] = $00	
ASM: 	[:gtmp1+3] = $00	
ASM: ; save_result stored in gtmp1
ASM: ; save_result ELSE store_reg
ASM: 	mov.l	8(sp),gtmp1

=================================================================== NEW INST compare (77)
	DUMP code = compare
	DUMP z < FLAG:0  >
	DUMP q1 < REG:gpr6 VAR STORAGE:AUTO:4(sp) > 'myLong' 
	DUMP q2 < REG:gpr6 VAR STORAGE:AUTO:4(sp) > 'myLong' 
PRIC2...
	compare long gpr6(myLong),gpr6(myLong)
-----
ASM: ; COMPARE START ========
ASM: 	; ORIGINAL ASM: 		cmp.l	gpr6,gpr6
OBJ DUMP: 	compare long gpr6(myLong),gpr6(myLong)
 @@q1 gpr6(myLong)
 @@q2 gpr6(myLong)
q1 ISREG (gpr6)
q2 ISREG (gpr6)
q2 ISREG (gpr6)
q2 ISVAR|REG (gpr6)
ASM: 	; BRANCH-TYPE-WILL-BE bne
ASM: 	REGA=[:gpr6+3]
ASM: 	NOOP = REGA A_MINUS_B_SIGNEDMAG [:gpr6+3] _S
ASM: 	REGA=[:gpr6+2]
ASM: 	NOOP = REGA A_MINUS_B           [:gpr6+2] _EQ_S
ASM: 	REGA=[:gpr6+1]
ASM: 	NOOP = REGA A_MINUS_B           [:gpr6+1] _EQ_S
ASM: 	REGA=[:gpr6+0]
ASM: 	NOOP = REGA A_MINUS_B           [:gpr6+0] _EQ_S
ASM: 	; aggregate flags into register
ASM: 	; NOT NEEDED REGA=0
ASM: 	; NOT NEEDED REGA = REGA A_OR_B 1 _LT
ASM: 	; NOT NEEDED REGA = REGA A_OR_B 2 _GT
ASM: 	; NOT NEEDED REGA = REGA A_OR_B 4 _NE
ASM: 	; NOT NEEDED REGA = REGA A_OR_B 8 _EQ

=================================================================== NEW INST bne (71)
	DUMP code = bne
	DUMP z < FLAG:0  >
	DUMP q1 < FLAG:0  >
	DUMP q2 < FLAG:0  >
PRIC2...
	bne L4
-----
ASM: ; BRANCH BLOCK ne
ASM: 	PCHI = <:l4
ASM: 	PCLO = >:l4 _NE
ASM: ; BRANCH TO LABEL l4

=================================================================== NEW INST label (69)
	DUMP code = label
	DUMP z < FLAG:0  >
	DUMP q1 < FLAG:0  >
	DUMP q2 < FLAG:0  >
PRIC2...
L3
-----
ASM: l3:

=================================================================== NEW INST move (2)
	DUMP code = move
	DUMP z < REG:gpr6 VAR STORAGE:AUTO:4(sp) > 'myLong' 
	DUMP q1 < KONST:170 >
	DUMP q2 < FLAG:0  >
PRIC2...
	move long #L170->gpr6(myLong) size=4
-----
ASM: ; ASSIGN type:l srcreg:noreg destreg:gpr6
;JL - load_reg gpr6 with value of type l
ASM: ; load_reg targ reg size:4    src data size:4
ASM: 	[:gpr6+0] = $aa	
ASM: 	[:gpr6+1] = $00	
ASM: 	[:gpr6+2] = $00	
ASM: 	[:gpr6+3] = $00	
ASM: ; save_result stored in gpr6
ASM: ; save_result ISREG
ASM: ; save_result : targ ISREG gpr6 and srcReg is same as targReg so nothing to do

=================================================================== NEW INST bra (76)
	DUMP code = bra
	DUMP z < FLAG:0  >
	DUMP q1 < FLAG:0  >
	DUMP q2 < FLAG:0  >
PRIC2...
	bra L5
-----
ASM: 	PCHI = <:l5
ASM: 	PCLO = >:l5

=================================================================== NEW INST label (69)
	DUMP code = label
	DUMP z < FLAG:0  >
	DUMP q1 < FLAG:0  >
	DUMP q2 < FLAG:0  >
PRIC2...
L4
-----
ASM: l4:

=================================================================== NEW INST allocreg (65)
ASM: ; ALLOCREG - gpr0

=================================================================== NEW INST add (27)
	DUMP code = add
	DUMP z < REG:gpr6 VAR STORAGE:AUTO:4(sp) > 'myLong' 
	DUMP q1 < REG:gpr6 VAR STORAGE:AUTO:4(sp) > 'myLong' 
	DUMP q2 < KONST:187 >
PRIC2...
	add long gpr6(myLong),#L187->gpr6(myLong)
-----
ASM: ; OR AND SHIFT MOD 
ASM: 	; ORIG add.l	gpr6,gpr6,187
ASM: ; save_result stored in gpr6
ASM: ; save_result ISREG
ASM: ; save_result : targ ISREG gpr6 and srcReg is same as targReg so nothing to do

=================================================================== NEW INST freereg (66)
ASM: ; FREEREG - gpr0

=================================================================== NEW INST label (69)
	DUMP code = label
	DUMP z < FLAG:0  >
	DUMP q1 < FLAG:0  >
	DUMP q2 < FLAG:0  >
PRIC2...
L5
-----
ASM: l5:

=================================================================== NEW INST push (78)
	DUMP code = push
	DUMP z < FLAG:0  >
	DUMP q1 < KONST:11 >
	DUMP q2 < FLAG:0  >
PRIC2...
	push int #I11 size=4
-----
ASM: ; PUSH = P
ASM: 	; ORIGINAL mov.i	0(sp),11
NOT IMPL PUSH !!!!!!!

=================================================================== NEW INST push (78)
	DUMP code = push
	DUMP z < FLAG:0  >
	DUMP q1 < KONST:22 >
	DUMP q2 < FLAG:0  >
PRIC2...
	push int #I22 size=4
-----
ASM: ; PUSH = P
ASM: 	; ORIGINAL mov.i	4(sp),22
NOT IMPL PUSH !!!!!!!

=================================================================== NEW INST push (78)
	DUMP code = push
	DUMP z < FLAG:0  >
	DUMP q1 < KONST:33 >
	DUMP q2 < FLAG:0  >
PRIC2...
	push int #I33 size=4
-----
ASM: ; PUSH = P
ASM: 	; ORIGINAL mov.i	8(sp),33
NOT IMPL PUSH !!!!!!!

=================================================================== NEW INST push (78)
	DUMP code = push
	DUMP z < FLAG:0  >
	DUMP q1 < KONST:44 >
	DUMP q2 < FLAG:0  >
PRIC2...
	push int #I44 size=4
-----
ASM: ; PUSH = P
ASM: 	; ORIGINAL mov.i	12(sp),44
NOT IMPL PUSH !!!!!!!

=================================================================== NEW INST push (78)
	DUMP code = push
	DUMP z < FLAG:0  >
	DUMP q1 < KONST:55 >
	DUMP q2 < FLAG:0  >
PRIC2...
	push int #I55 size=4
-----
ASM: ; PUSH = P
ASM: 	; ORIGINAL mov.i	16(sp),55
NOT IMPL PUSH !!!!!!!

=================================================================== NEW INST push (78)
	DUMP code = push
	DUMP z < FLAG:0  >
	DUMP q1 < KONST:66 >
	DUMP q2 < FLAG:0  >
PRIC2...
	push int #I66 size=4
-----
ASM: ; PUSH = P
ASM: 	; ORIGINAL mov.i	20(sp),66
NOT IMPL PUSH !!!!!!!

=================================================================== NEW INST call (42)
	DUMP code = call
	DUMP z < FLAG:0  >
	DUMP q1 < VAR STORAGE:EXTERN:l94428265014640 > 'sub' 
	DUMP q2 < FLAG:0  >
PRIC2...
	call function M0+_sub(sub) size=24 => sub
-----
ASM: ; CALL
ASM: 	; call	_sub

=================================================================== NEW INST allocreg (65)
ASM: ; ALLOCREG - gpr0

=================================================================== NEW INST get-return (93)
	DUMP code = get-return
	DUMP z < REG:gpr8 VAR STORAGE:AUTO:16(sp) > 'o' 
	DUMP q1 < FLAG:0  >
	DUMP q2 < FLAG:0  >
PRIC2...
	get-return int ->gpr8(o)
-----
ASM: ; GETRETURN
ASM: 	REGA = [:gpr0]
ASM: 	[:gpr8] = REGA
z is a register
	DUMP z < REG:gpr8 VAR STORAGE:AUTO:16(sp) > 'o' ===
=================================================================== NEW INST freereg (66)
ASM: ; FREEREG - gpr0

=================================================================== NEW INST set-return (94)
	DUMP code = set-return
	DUMP z < FLAG:0  >
	DUMP q1 < REG:gpr6 VAR STORAGE:AUTO:4(sp) > 'myLong' 
	DUMP q2 < FLAG:0  >
PRIC2...
	set-return int gpr6(myLong)
-----
ASM: ; SETRETURN - zreg = gpr0
;JL - load_reg gpr0 with value of type i
ASM: ; load_reg targ reg size:4    src data size:4
ASM: 	[:gpr0+0] = $00	
ASM: 	[:gpr0+1] = $00	
ASM: 	[:gpr0+2] = $00	
ASM: 	[:gpr0+3] = $00	

=================================================================== NEW INST label (69)
	DUMP code = label
	DUMP z < FLAG:0  >
	DUMP q1 < FLAG:0  >
	DUMP q2 < FLAG:0  >
PRIC2...
L1
-----
ASM: l1:
ASM: # stacksize=0+??


gen_code() frame=12
ASM: 	.global	_sub
ASM: _sub:

=================================================================== NEW INST allocreg (65)
ASM: ; ALLOCREG - gpr14

=================================================================== NEW INST allocreg (65)
ASM: ; ALLOCREG - gpr13

=================================================================== NEW INST move (2)
	DUMP code = move
	DUMP z < REG:gpr13 >
	DUMP q1 < VAR STORAGE:AUTO:36(sp) > 'subParamF' 
	DUMP q2 < FLAG:0  >
PRIC2...
	move int M0+-28(FP)(subParamF)->gpr13 size=4
-----
ASM: ; ASSIGN type:i srcreg:noreg destreg:gpr13
;JL - load_reg gpr13 with value of type i
ASM: ; load_reg targ reg size:4    src data size:4
ASM: 	[:gpr13+0] = $00	
ASM: 	[:gpr13+1] = $00	
ASM: 	[:gpr13+2] = $00	
ASM: 	[:gpr13+3] = $00	
ASM: ; save_result stored in gpr13
ASM: ; save_result ISREG
ASM: ; save_result : targ ISREG gpr13 and srcReg is same as targReg so nothing to do

=================================================================== NEW INST allocreg (65)
ASM: ; ALLOCREG - gpr12

=================================================================== NEW INST move (2)
	DUMP code = move
	DUMP z < REG:gpr12 >
	DUMP q1 < VAR STORAGE:AUTO:32(sp) > 'subParamE' 
	DUMP q2 < FLAG:0  >
PRIC2...
	move int M0+-24(FP)(subParamE)->gpr12 size=4
-----
ASM: ; ASSIGN type:i srcreg:noreg destreg:gpr12
;JL - load_reg gpr12 with value of type i
ASM: ; load_reg targ reg size:4    src data size:4
ASM: 	[:gpr12+0] = $00	
ASM: 	[:gpr12+1] = $00	
ASM: 	[:gpr12+2] = $00	
ASM: 	[:gpr12+3] = $00	
ASM: ; save_result stored in gpr12
ASM: ; save_result ISREG
ASM: ; save_result : targ ISREG gpr12 and srcReg is same as targReg so nothing to do

=================================================================== NEW INST allocreg (65)
ASM: ; ALLOCREG - gpr11

=================================================================== NEW INST move (2)
	DUMP code = move
	DUMP z < REG:gpr11 >
	DUMP q1 < VAR STORAGE:AUTO:28(sp) > 'subParamD' 
	DUMP q2 < FLAG:0  >
PRIC2...
	move int M0+-20(FP)(subParamD)->gpr11 size=4
-----
ASM: ; ASSIGN type:i srcreg:noreg destreg:gpr11
;JL - load_reg gpr11 with value of type i
ASM: ; load_reg targ reg size:4    src data size:4
ASM: 	[:gpr11+0] = $00	
ASM: 	[:gpr11+1] = $00	
ASM: 	[:gpr11+2] = $00	
ASM: 	[:gpr11+3] = $00	
ASM: ; save_result stored in gpr11
ASM: ; save_result ISREG
ASM: ; save_result : targ ISREG gpr11 and srcReg is same as targReg so nothing to do

=================================================================== NEW INST allocreg (65)
ASM: ; ALLOCREG - gpr10

=================================================================== NEW INST move (2)
	DUMP code = move
	DUMP z < REG:gpr10 >
	DUMP q1 < VAR STORAGE:AUTO:20(sp) > 'subParamB' 
	DUMP q2 < FLAG:0  >
PRIC2...
	move int M0+-12(FP)(subParamB)->gpr10 size=4
-----
ASM: ; ASSIGN type:i srcreg:noreg destreg:gpr10
;JL - load_reg gpr10 with value of type i
ASM: ; load_reg targ reg size:4    src data size:4
ASM: 	[:gpr10+0] = $00	
ASM: 	[:gpr10+1] = $00	
ASM: 	[:gpr10+2] = $00	
ASM: 	[:gpr10+3] = $00	
ASM: ; save_result stored in gpr10
ASM: ; save_result ISREG
ASM: ; save_result : targ ISREG gpr10 and srcReg is same as targReg so nothing to do

=================================================================== NEW INST allocreg (65)
ASM: ; ALLOCREG - gpr9

=================================================================== NEW INST move (2)
	DUMP code = move
	DUMP z < REG:gpr9 >
	DUMP q1 < VAR STORAGE:AUTO:16(sp) > 'subParamA' 
	DUMP q2 < FLAG:0  >
PRIC2...
	move int M0+-8(FP)(subParamA)->gpr9 size=4
-----
ASM: ; ASSIGN type:i srcreg:noreg destreg:gpr9
;JL - load_reg gpr9 with value of type i
ASM: ; load_reg targ reg size:4    src data size:4
ASM: 	[:gpr9+0] = $00	
ASM: 	[:gpr9+1] = $00	
ASM: 	[:gpr9+2] = $00	
ASM: 	[:gpr9+3] = $00	
ASM: ; save_result stored in gpr9
ASM: ; save_result ISREG
ASM: ; save_result : targ ISREG gpr9 and srcReg is same as targReg so nothing to do

=================================================================== NEW INST allocreg (65)
ASM: ; ALLOCREG - gpr8

=================================================================== NEW INST allocreg (65)
ASM: ; ALLOCREG - gpr7

=================================================================== NEW INST move (2)
	DUMP code = move
	DUMP z < REG:gpr7 >
	DUMP q1 < VAR STORAGE:AUTO:24(sp) > 'subParamC' 
	DUMP q2 < FLAG:0  >
PRIC2...
	move int M0+-16(FP)(subParamC)->gpr7 size=4
-----
ASM: ; ASSIGN type:i srcreg:noreg destreg:gpr7
;JL - load_reg gpr7 with value of type i
ASM: ; load_reg targ reg size:4    src data size:4
ASM: 	[:gpr7+0] = $00	
ASM: 	[:gpr7+1] = $00	
ASM: 	[:gpr7+2] = $00	
ASM: 	[:gpr7+3] = $00	
ASM: ; save_result stored in gpr7
ASM: ; save_result ISREG
ASM: ; save_result : targ ISREG gpr7 and srcReg is same as targReg so nothing to do

=================================================================== NEW INST allocreg (65)
ASM: ; ALLOCREG - gpr6

=================================================================== NEW INST move (2)
	DUMP code = move
	DUMP z < REG:gpr6 VAR STORAGE:AUTO:0(sp) > 'subVar1' 
	DUMP q1 < REG:gpr9 VAR STORAGE:AUTO:16(sp) > 'subParamA' 
	DUMP q2 < FLAG:0  >
PRIC2...
	move int gpr9(subParamA)->gpr6(subVar1) size=4
-----
ASM: ; ASSIGN type:i srcreg:gpr9 destreg:gpr6
;JL - load_reg gpr6 with value of type i
ASM: ; load_reg targ reg size:4    src data size:4
ASM: 	[:gpr6+0] = $00	
ASM: 	[:gpr6+1] = $00	
ASM: 	[:gpr6+2] = $00	
ASM: 	[:gpr6+3] = $00	
ASM: ; save_result stored in gpr6
ASM: ; save_result ISREG
ASM: ; save_result : targ ISREG gpr6 and srcReg is same as targReg so nothing to do

=================================================================== NEW INST allocreg (65)
ASM: ; ALLOCREG - gpr0

=================================================================== NEW INST add (27)
	DUMP code = add
	DUMP z < REG:gpr0 >
	DUMP q1 < REG:gpr10 VAR STORAGE:AUTO:20(sp) > 'subParamB' 
	DUMP q2 < REG:gpr7 VAR STORAGE:AUTO:24(sp) > 'subParamC' 
PRIC2...
	add int gpr10(subParamB),gpr7(subParamC)->gpr0[S]
-----
ASM: ; OR AND SHIFT MOD 
ASM: 	; ORIG add.i	gpr0,gpr10,gpr7
ASM: ; save_result stored in gpr0
ASM: ; save_result ISREG
ASM: ; save_result : targ ISREG gpr0 and srcReg is same as targReg so nothing to do

=================================================================== NEW INST add (27)
	DUMP code = add
	DUMP z < REG:gpr0 >
	DUMP q1 < REG:gpr0 >
	DUMP q2 < REG:gpr11 VAR STORAGE:AUTO:28(sp) > 'subParamD' 
PRIC2...
	add int gpr0[S],gpr11(subParamD)->gpr0[S]
-----
ASM: ; OR AND SHIFT MOD 
ASM: 	; ORIG add.i	gpr0,gpr0,gpr11
ASM: ; save_result stored in gpr0
ASM: ; save_result ISREG
ASM: ; save_result : targ ISREG gpr0 and srcReg is same as targReg so nothing to do

=================================================================== NEW INST add (27)
	DUMP code = add
	DUMP z < REG:gpr0 >
	DUMP q1 < REG:gpr0 >
	DUMP q2 < REG:gpr12 VAR STORAGE:AUTO:32(sp) > 'subParamE' 
PRIC2...
	add int gpr0[S],gpr12(subParamE)->gpr0[S]
-----
ASM: ; OR AND SHIFT MOD 
ASM: 	; ORIG add.i	gpr0,gpr0,gpr12
ASM: ; save_result stored in gpr0
ASM: ; save_result ISREG
ASM: ; save_result : targ ISREG gpr0 and srcReg is same as targReg so nothing to do

=================================================================== NEW INST add (27)
	DUMP code = add
	DUMP z < REG:gpr8 VAR STORAGE:AUTO:4(sp) > 'subVar2' 
	DUMP q1 < REG:gpr0 >
	DUMP q2 < REG:gpr13 VAR STORAGE:AUTO:36(sp) > 'subParamF' 
PRIC2...
	add int gpr0[S],gpr13(subParamF)->gpr8(subVar2)
-----
ASM: ; OR AND SHIFT MOD 
ASM: 	; ORIG add.i	gpr8,gpr0,gpr13
ASM: ; save_result stored in gpr8
ASM: ; save_result ISREG
ASM: ; save_result : targ ISREG gpr8 and srcReg is same as targReg so nothing to do

=================================================================== NEW INST freereg (66)
ASM: ; FREEREG - gpr0

=================================================================== NEW INST move (2)
	DUMP code = move
	DUMP z < REG:gpr14 VAR STORAGE:AUTO:8(sp) > 'subVarC' 
	DUMP q1 < REG:gpr6 VAR STORAGE:AUTO:0(sp) > 'subVar1' 
	DUMP q2 < FLAG:0  >
PRIC2...
	move int gpr6(subVar1)->gpr14(subVarC) size=4
-----
ASM: ; ASSIGN type:i srcreg:gpr6 destreg:gpr14
;JL - load_reg gpr14 with value of type i
ASM: ; load_reg targ reg size:4    src data size:4
ASM: 	[:gpr14+0] = $00	
ASM: 	[:gpr14+1] = $00	
ASM: 	[:gpr14+2] = $00	
ASM: 	[:gpr14+3] = $00	
ASM: ; save_result stored in gpr14
ASM: ; save_result ISREG
ASM: ; save_result : targ ISREG gpr14 and srcReg is same as targReg so nothing to do

=================================================================== NEW INST push (78)
	DUMP code = push
	DUMP z < FLAG:0  >
	DUMP q1 < REG:gpr6 VAR STORAGE:AUTO:0(sp) > 'subVar1' 
	DUMP q2 < FLAG:0  >
PRIC2...
	push int gpr6(subVar1) size=4
-----
ASM: ; PUSH = P
ASM: 	; ORIGINAL mov.i	0(sp),gpr6
NOT IMPL PUSH !!!!!!!

=================================================================== NEW INST push (78)
	DUMP code = push
	DUMP z < FLAG:0  >
	DUMP q1 < REG:gpr8 VAR STORAGE:AUTO:4(sp) > 'subVar2' 
	DUMP q2 < FLAG:0  >
PRIC2...
	push int gpr8(subVar2) size=4
-----
ASM: ; PUSH = P
ASM: 	; ORIGINAL mov.i	4(sp),gpr8
NOT IMPL PUSH !!!!!!!

=================================================================== NEW INST push (78)
	DUMP code = push
	DUMP z < FLAG:0  >
	DUMP q1 < REG:gpr7 VAR STORAGE:AUTO:24(sp) > 'subParamC' 
	DUMP q2 < FLAG:0  >
PRIC2...
	push int gpr7(subParamC) size=4
-----
ASM: ; PUSH = P
ASM: 	; ORIGINAL mov.i	8(sp),gpr7
NOT IMPL PUSH !!!!!!!

=================================================================== NEW INST push (78)
	DUMP code = push
	DUMP z < FLAG:0  >
	DUMP q1 < KONST:3 >
	DUMP q2 < FLAG:0  >
PRIC2...
	push int #I3 size=4
-----
ASM: ; PUSH = P
ASM: 	; ORIGINAL mov.i	12(sp),3
NOT IMPL PUSH !!!!!!!

=================================================================== NEW INST push (78)
	DUMP code = push
	DUMP z < FLAG:0  >
	DUMP q1 < KONST:3 >
	DUMP q2 < FLAG:0  >
PRIC2...
	push int #I3 size=4
-----
ASM: ; PUSH = P
ASM: 	; ORIGINAL mov.i	16(sp),3
NOT IMPL PUSH !!!!!!!

=================================================================== NEW INST push (78)
	DUMP code = push
	DUMP z < FLAG:0  >
	DUMP q1 < KONST:3 >
	DUMP q2 < FLAG:0  >
PRIC2...
	push int #I3 size=4
-----
ASM: ; PUSH = P
ASM: 	; ORIGINAL mov.i	20(sp),3
NOT IMPL PUSH !!!!!!!

=================================================================== NEW INST call (42)
	DUMP code = call
	DUMP z < FLAG:0  >
	DUMP q1 < VAR STORAGE:EXTERN:l94428265014640 > 'sub' 
	DUMP q2 < FLAG:0  >
PRIC2...
	call function M0+_sub(sub) size=24 => sub
-----
ASM: ; CALL
ASM: 	; call	_sub

=================================================================== NEW INST allocreg (65)
ASM: ; ALLOCREG - gpr0

=================================================================== NEW INST get-return (93)
	DUMP code = get-return
	DUMP z < REG:gpr0 >
	DUMP q1 < FLAG:0  >
	DUMP q2 < FLAG:0  >
PRIC2...
	get-return int ->gpr0[S]
-----
ASM: ; GETRETURN
ASM: 	REGA = [:gpr0]
ASM: 	[:gpr0] = REGA
z is a register
	DUMP z < REG:gpr0 >===
=================================================================== NEW INST freereg (66)
ASM: ; FREEREG - gpr0

=================================================================== NEW INST push (78)
	DUMP code = push
	DUMP z < FLAG:0  >
	DUMP q1 < REG:gpr6 VAR STORAGE:AUTO:0(sp) > 'subVar1' 
	DUMP q2 < FLAG:0  >
PRIC2...
	push int gpr6(subVar1) size=4
-----
ASM: ; PUSH = P
ASM: 	; ORIGINAL mov.i	0(sp),gpr6
NOT IMPL PUSH !!!!!!!

=================================================================== NEW INST push (78)
	DUMP code = push
	DUMP z < FLAG:0  >
	DUMP q1 < REG:gpr8 VAR STORAGE:AUTO:4(sp) > 'subVar2' 
	DUMP q2 < FLAG:0  >
PRIC2...
	push int gpr8(subVar2) size=4
-----
ASM: ; PUSH = P
ASM: 	; ORIGINAL mov.i	4(sp),gpr8
NOT IMPL PUSH !!!!!!!

=================================================================== NEW INST push (78)
	DUMP code = push
	DUMP z < FLAG:0  >
	DUMP q1 < REG:gpr7 VAR STORAGE:AUTO:24(sp) > 'subParamC' 
	DUMP q2 < FLAG:0  >
PRIC2...
	push int gpr7(subParamC) size=4
-----
ASM: ; PUSH = P
ASM: 	; ORIGINAL mov.i	8(sp),gpr7
NOT IMPL PUSH !!!!!!!

=================================================================== NEW INST push (78)
	DUMP code = push
	DUMP z < FLAG:0  >
	DUMP q1 < KONST:3 >
	DUMP q2 < FLAG:0  >
PRIC2...
	push int #I3 size=4
-----
ASM: ; PUSH = P
ASM: 	; ORIGINAL mov.i	12(sp),3
NOT IMPL PUSH !!!!!!!

=================================================================== NEW INST push (78)
	DUMP code = push
	DUMP z < FLAG:0  >
	DUMP q1 < KONST:3 >
	DUMP q2 < FLAG:0  >
PRIC2...
	push int #I3 size=4
-----
ASM: ; PUSH = P
ASM: 	; ORIGINAL mov.i	16(sp),3
NOT IMPL PUSH !!!!!!!

=================================================================== NEW INST push (78)
	DUMP code = push
	DUMP z < FLAG:0  >
	DUMP q1 < KONST:3 >
	DUMP q2 < FLAG:0  >
PRIC2...
	push int #I3 size=4
-----
ASM: ; PUSH = P
ASM: 	; ORIGINAL mov.i	20(sp),3
NOT IMPL PUSH !!!!!!!

=================================================================== NEW INST call (42)
	DUMP code = call
	DUMP z < FLAG:0  >
	DUMP q1 < VAR STORAGE:EXTERN:l94428265014640 > 'sub' 
	DUMP q2 < FLAG:0  >
PRIC2...
	call function M0+_sub(sub) size=24 => sub
-----
ASM: ; CALL
ASM: 	; call	_sub

=================================================================== NEW INST allocreg (65)
ASM: ; ALLOCREG - gpr0

=================================================================== NEW INST get-return (93)
	DUMP code = get-return
	DUMP z < REG:gpr0 >
	DUMP q1 < FLAG:0  >
	DUMP q2 < FLAG:0  >
PRIC2...
	get-return int ->gpr0[S]
-----
ASM: ; GETRETURN
ASM: 	REGA = [:gpr0]
ASM: 	[:gpr0] = REGA
z is a register
	DUMP z < REG:gpr0 >===
=================================================================== NEW INST freereg (66)
ASM: ; FREEREG - gpr0

=================================================================== NEW INST set-return (94)
	DUMP code = set-return
	DUMP z < FLAG:0  >
	DUMP q1 < REG:gpr6 VAR STORAGE:AUTO:0(sp) > 'subVar1' 
	DUMP q2 < FLAG:0  >
PRIC2...
	set-return int gpr6(subVar1)
-----
ASM: ; SETRETURN - zreg = gpr0
;JL - load_reg gpr0 with value of type i
ASM: ; load_reg targ reg size:4    src data size:4
ASM: 	[:gpr0+0] = $00	
ASM: 	[:gpr0+1] = $00	
ASM: 	[:gpr0+2] = $00	
ASM: 	[:gpr0+3] = $00	

=================================================================== NEW INST label (69)
	DUMP code = label
	DUMP z < FLAG:0  >
	DUMP q1 < FLAG:0  >
	DUMP q2 < FLAG:0  >
PRIC2...
L6
-----
ASM: l6:
ASM: # stacksize=0+??

ASM: ;JL gen_var_head
ASM: 	.globl	_static1
ASM: 	.data
ASM: 	.align	2
ASM: _static1:
ASM: 	dc.i	1
ASM: ;JL gen_var_head
ASM: 	.globl	_static2
ASM: 	.align	2
ASM: _static2:
ASM: 	dc.i	2
ASM: 	noreg :	BYTES [0,0,0,0]
ASM: 	gtmp1 :	BYTES [0,0,0,0]
ASM: 	gtmp2 :	BYTES [0,0,0,0]
ASM: 	ftmp1 :	BYTES [0,0,0,0]
ASM: 	ftmp2 :	BYTES [0,0,0,0]
ASM: 	gpr0  :	BYTES [0,0,0,0]
ASM: 	gpr1  :	BYTES [0,0,0,0]
ASM: 	gpr2  :	BYTES [0,0,0,0]
ASM: 	gpr3  :	BYTES [0,0,0,0]
ASM: 	gpr4  :	BYTES [0,0,0,0]
ASM: 	gpr5  :	BYTES [0,0,0,0]
ASM: 	gpr6  :	BYTES [0,0,0,0]
ASM: 	gpr7  :	BYTES [0,0,0,0]
ASM: 	gpr8  :	BYTES [0,0,0,0]
ASM: 	gpr9  :	BYTES [0,0,0,0]
ASM: 	gpr10 :	BYTES [0,0,0,0]
ASM: 	gpr11 :	BYTES [0,0,0,0]
ASM: 	gpr12 :	BYTES [0,0,0,0]
ASM: 	gpr13 :	BYTES [0,0,0,0]
ASM: 	gpr14 :	BYTES [0,0,0,0]
ASM: 	gpr15 :	BYTES [0,0,0,0]
ASM: 	fpr0  :	BYTES [0,0,0,0]
ASM: 	fpr1  :	BYTES [0,0,0,0]
ASM: 	fpr2  :	BYTES [0,0,0,0]
ASM: 	fpr3  :	BYTES [0,0,0,0]
ASM: 	fpr4  :	BYTES [0,0,0,0]
ASM: 	fpr5  :	BYTES [0,0,0,0]
ASM: 	fpr6  :	BYTES [0,0,0,0]
ASM: 	fpr7  :	BYTES [0,0,0,0]
ASM: 	fpr8  :	BYTES [0,0,0,0]
ASM: 	fpr9  :	BYTES [0,0,0,0]
ASM: 	fpr10 :	BYTES [0,0,0,0]
ASM: 	fpr11 :	BYTES [0,0,0,0]
ASM: 	fpr12 :	BYTES [0,0,0,0]
ASM: 	fpr13 :	BYTES [0,0,0,0]
ASM: 	fpr14 :	BYTES [0,0,0,0]
ASM: 	fpr15 :	BYTES [0,0,0,0]
ASM: 	fp    :	BYTES [0,0,0,0]
ASM: 	sp    :	BYTES [0,0,0,0]
OK
